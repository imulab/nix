buildscript {
    ext {
        kotlinVersion = '1.3.10'
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id 'org.jetbrains.dokka' version '0.9.17'
    id 'com.gradle.build-scan' version '1.16'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = "io.imulab"
version = "0.0.1"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xuse-experimental=kotlin.Experimental", "-Xjsr305=strict"]
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xuse-experimental=kotlin.Experimental", "-Xjsr305=strict"]
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'https://dl.bintray.com/spekframework/spek' }
    maven { url 'https://artifactory.imulab.io/artifactory/gradle-dev-local/' }
}

ext {
    springCloudVersion = "Greenwich.M3"
    kotlinCoroutineVersion = "1.0.1"
    jBcryptVersion = "0.4"
    jose4jVersion = "0.6.4"

    junitVersion = "5.3.1"
    mockitoVersion = "2.23.0"
    mockitoKotlinVersion = "2.0.0"
    spekVersion = "2.0.0-rc.1"
    assertjVersion = "3.11.1"
    wiremockVersion = "2.19.0"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutineVersion}")
    implementation("org.mindrot:jbcrypt:${jBcryptVersion}")
    implementation("org.bitbucket.b_c:jose4j:${jose4jVersion}")
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    //implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-data-redis-reactive')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    //implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    //implementation('org.springframework.cloud:spring-cloud-starter-vault-config')
    implementation('org.springframework.session:spring-session-data-redis')
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation("org.spekframework.spek2:spek-dsl-jvm:${spekVersion}") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation("org.spekframework.spek2:spek-runner-junit5:${spekVersion}") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'spek2'
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "${buildDir}/javadoc"
}